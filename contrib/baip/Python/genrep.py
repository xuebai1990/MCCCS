#!/usr/bin/env python

import os
import simutil as su
import statistics as stats

#>>> If numpy and matplotlib are installed, you can uncomment lines
#   starting with "###" to generate plots of simulation trajectory <<<
#import numpy as np
#import matplotlib as mpl
#import matplotlib.pyplot as plt

def traj(ax,result):
    if not hasattr(traj,"firstBlock"):
        traj.firstBlock=0
    block=np.arange(traj.firstBlock,traj.firstBlock+len(result.energyTrajectory[1]))
    traj.firstBlock+=len(result.energyTrajectory[1])
    for ibox in range(result.nbox):
        ax[ibox].plot(block,result.energyTrajectory[ibox+1],'o:',label='energyTrajectory')
        ax[2+ibox].plot(block,result.densityTrajectory[ibox+1],'o:',label='densityTrajectory')
        ax[4+ibox].plot(block,result.pressureTrajectory[ibox+1],'o:',label='pressureTrajectory')
    return

nbox=2
nmolty=1
avg=stats.Stat('Press',Dens=nbox)
avg.register('Avg',stats.mean)
avg.register('SE',stats.stderr)
### mpl.rcParams['figure.figsize']=(3.25,13)
fou=open('rep.dat','w')
fou.write('#Name NCycles Temp[K] Pvap[kPa] Error Density[g/mL, liq] Error Density[g/mL, vap] Error\n')

#>>> The directory is expected to be organized as VLE/methanol/300K/RUNxx <<<
sim=su.ProcDir(r'/VLE/.*/([\.\d]+)K$',r'RUN(\d+)$')
for curSim in sim:
    # averages for each run
    RunCycles=[] # total number of cycles performed
    avg.clear()

    ### fig,ax=mpl.pyplot.subplots(nrows=6,ncols=1,sharex=True)
    ### fig.subplots_adjust(left=0.15,right=0.95,bottom=0.05,top=0.95,hspace=0)
    ### for oneax in ax:
    ###     oneax.ticklabel_format(style='scientific',scilimits=(0,0),axis='y')

    temp=float(sim.simMatch.group(1))

    os.chdir(curSim)

    irun=0
    run=sim.getRuns()
    for pathname in run:
        print "cur_dir = ", pathname
        os.chdir(pathname)
        #>>> The following line determines what is the last simulation output
        #    using the log file generated by sub.script <<<
        (suffix,last,cur)=su.getSuffix('log')

        RunCycles.append(0)
        avg.Press.append(0.0)
        for ibox in range(nbox):
            avg.Dens[ibox].append(0.0)

        if suffix=='prod': #>>> if it is production, start with run.prod1 <<<
            st=1
        else: #>>> if not, consider only the most recent output, such as run.equil? <<<
            st=last
            last=1
        traj.firstBlock=0
        for ifile in range(st,last+st):
            try:
                result=su.procRun("run."+suffix+str(ifile))
                #temp=result.temp #>>> You can also get temperature this way if your directory path does not contain this information
                ### traj(ax,result)

                RunCycles[irun]+=result.ncycles
                #>>> assume the last simulation box represents vapor <<<
                avg.Press[irun]+=result.press[result.nbox]*result.ncycles
                for ibox in range(result.nbox):
                    avg.Dens[ibox][irun]+=result.dens[ibox+1]*result.ncycles
            except (IOError,IndexError):
                continue

        avg.Press[irun]/=RunCycles[irun]
        for ibox in range(nbox):
            avg.Dens[ibox][irun]/=RunCycles[irun]

        irun+=1

    ### os.chdir(curSim)
    ### fig.savefig('trajectory.pdf')

    # averages
    avg.update(RunCycles)

    fou.write('%s %d %3.3f %.6f %.3g' % (curSim,float(sum(RunCycles))/irun,temp,avg.AvgPress,avg.SEPress))
    for ibox in range(nbox):
        fou.write(' %g %g' % (avg.AvgDens[ibox],avg.SEDens[ibox]))
    fou.write('\n')

fou.close()
